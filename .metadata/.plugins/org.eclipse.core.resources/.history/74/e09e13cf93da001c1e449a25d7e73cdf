String 클래스 메소드

String str = "AB".concat("CD").concat("EF"); == String str = (("AB".concat("CD")).concat("EF"));
새로운 인스턴스가 2개가 만들어진다. (String은 수정이 안되므로 인스턴스가 생성된다.)

덧셈은 기본적으로 concat이다. concat == +
String birth = "<양>" + 7+'.'+16;
<양>.concat(String.valueOf(7)).concat(String.valueOf('.')).concat(String.valueOf(7)); -> 인스턴스 6개이상 발생.
이런 구조는 인스턴스를 많이 발생시키므로 비효율적이다.

String brith = new StringBuilder ("<양>").append(7).append('.').append(16).toString(); ->StringBuilder 인스턴스 하나 생성후 저장만 함으로 인스턴스 2개
-> new StringBuilder와 toString()
StringBuilder : 버퍼저장소, append : 인스턴스 참조값 반환, toString() : 저장해놓았던 내용을 가지고 문자열 인스턴스 생성.

StringBuilder append(String str), StringBuilder append(double d),,,,등 오버로딩 되어있음.

StringBuilder stub = new StringBuilder("123");
System.out.println(stub.toString());

StringBuffer와 StringBuilder는 기능적으로 완전히 동일 but 쓰레드에 안정적, 쓰레드 안전성이 불필요하면 성능의 저하만 유발하게됨.그래서 만들어낸게 StringBuilder이다.

"println의 인자로 인스턴스의 참조 값이 전달되면, 해당 인스턴스의 toString 메소드가 호출되면서 반환되는 문자열이 출력된다!"
toString 메서드는 object 클래스의 메서드 이며 toString 메서드를 재정의 하지 않을시에는 인스턴스의 주소값이 출력되게 되있으며
클래스명 + @ + 숫자 조합으로 형성되게 되있다. 
"toString 메소드는 인스턴스의 정보를 문자열의 형태로 반환하기 위한 메소드이다."
"가급적이면 toString 메소드를 오버라이딩을 해서 인스턴스에 대한 정보를 적절히 표현할 수 있도록 하는 것이 좋다"


콘솔출력
toString() : String 인스턴스를 반환하는 역할.
println print 는 전달된 참조값을 바탕으로 해당 메소드의 toString()메소드를 호출한다.

StringBuilder stb = new StringBuilder("12"); stb.append(34);
Systen.out.println(stb.toString()); == System.out.println(stb);

printf()메소드
-format의 약자이다.

콘솔 입력
program의 조건 1) 보여주는 것이 있어야한다. 2) 입력받는 내용이 있어야한다.  --> 입력과 출력
기본적인 입력 장치 : 키보드

import java.util.*;
Scanner 클래스 
Scanner 클래스의 인스턴스 새엇ㅇ은 데이터를 뽑아올 대상과의 연결을 의미한다.

Scanner(File source);
Scanner(String source);
Scanner(InputStream source);

String source = "1 3 5";
Scanner sc = new Scanner(source); // Scanner 인스턴스 생성
int num1 = sc.nextInt(); //int형 데이터 추출
int num2 = sc.nextInt(); //int형 데이터 추출
int num3 = sc.nextInt(); //int형 데이터 추출
System.out.println(num1+" "+num2+" "+num3+" ");

키보드 적용
in의 의미 : 키보드
Scanner sc1 = new Scanner(System.in);
int num1 = sc1.nextInt();
int num2 = sc1.nextInt();
int num3 = sc1.nextInt();
System.out.println(num1+" "+num2+" "+num3+" ");




